import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram.ext import Application, CommandHandler
from collections import defaultdict
from aiohttp import web

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

mur_counts = defaultdict(int)
last_mur_time = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∫–æ–º–∞–Ω–¥–∏ –∫–æ–∂–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN")

PORT = int(os.getenv("PORT", 10000))  # –ü–æ—Ä—Ç —ñ–∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –∞–±–æ 10000 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –í–∞—à URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update, context):
    await update.message.reply_text("–≤–æ—Ä–∫–∞—é ü•∫")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def mur_handler(update, context):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name

    # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    now = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            await update.message.reply_text(
                f"—Ç–≤–æ–π –º—É—Ä—á–∞–ª—å–Ω—ñ–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è, –∑–∞—á–µ–∫–∞–π {remaining_time.seconds // 60} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
    last_mur_time[user_id] = now

    # –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –º—É—Ä—á–∞–Ω–Ω—è
    if context.args:
        try:
            new_count = int(context.args[0])
            if new_count < 0:
                await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                return
            mur_counts[user_first_name] = new_count
            await update.message.reply_text(f"{user_first_name} —á—ñ—Ç–µ—Ä! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {new_count}")
        except ValueError:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—åüêæ.")
    else:
        mur_counts[user_first_name] += 1
        count = mur_counts[user_first_name]
        await update.message.reply_text(f"{user_first_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ. –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {count}.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
async def run_telegram_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("murr", mur_handler))

    # –£—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
    logger.info("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫...")
    await application.bot.set_webhook(WEBHOOK_URL + "/webhook")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –ø—Ä–æ–≥—Ä–∞–º–∏
    return application

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –≤–µ–±—Ö—É–∫–∞
async def telegram_webhook(request):
    application = request.app["bot_app"]
    data = await request.json()
    await application.update_queue.put(data)
    return web.Response(text="OK")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è UptimeRobot
async def handle_uptime(request):
    return web.Response(text="UptimeRobot –ø—Ä–∞—Ü—é—î!")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    application = await run_telegram_bot()

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FastAPI
    app = web.Application()
    app["bot_app"] = application
    app.router.add_post("/webhook", telegram_webhook)
    app.router.add_get("/", handle_uptime)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")

    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
