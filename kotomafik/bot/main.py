import logging
import asyncio
from datetime import datetime
from aiohttp import web
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –º—É—Ä—á–∞–Ω—å
mur_counts = {}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {update.message.from_user.first_name}")
        await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {update.message.from_user.first_name}! –í—ñ—Ç–∞—é –Ω–∞ –±–æ—Ä—Ç—É! ü•≥")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def mur_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_first_name = update.effective_user.first_name
        now = datetime.now()

        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /murr –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user_first_name} ({user_id})")

        if context.args:
            try:
                new_count = int(context.args[0])
                if new_count < 0:
                    await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                    return
                mur_counts[user_first_name] = new_count
                await update.message.reply_text(f"{user_first_name} —á—ñ—Ç–µ—Ä! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {new_count}")
            except ValueError:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—åüêæ.")
        else:
            mur_counts[user_first_name] += 1
            count = mur_counts[user_first_name]
            await update.message.reply_text(f"{user_first_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ. –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {count}.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /murr: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    try:
        data = await request.json()
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {data}")
        await application.update_queue.put(data)  # —Å—Ç–∞–≤–∏–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É —á–µ—Ä–≥—É
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(text="Error", status=500)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_telegram_bot():
    try:
        application = Application.builder().token("YOUR_BOT_TOKEN").build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("murr", mur_handler))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.initialize()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
        await application.start_polling()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫ UptimeRobot —Å–µ—Ä–≤—ñ—Å—É
async def run_uptime_robot():
    try:
        # –¢—É—Ç –≤–∞—à –∫–æ–¥ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å–µ—Ä–≤—ñ—Å—É —á–µ—Ä–µ–∑ UptimeRobot
        pass
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É UptimeRobot: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    try:
        await asyncio.gather(
            run_telegram_bot(),
            run_uptime_robot()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if name == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É...")
        asyncio.run(main())  # –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É: {e}")
