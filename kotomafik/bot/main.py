import os
import asyncio
import logging
from telegram.ext import Application, CommandHandler
from collections import defaultdict
from aiohttp import web

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

mur_counts = defaultdict(int)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN")

PORT = int(os.getenv("PORT", 10000))  # –ü–æ—Ä—Ç —ñ–∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –∞–±–æ 10000 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update, context):
    await update.message.reply_text("–≤–æ—Ä–∫–∞—é ü•∫")

async def mur_handler(update, context):
    user_first_name = update.effective_user.first_name

    # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–æ –∫–æ–º–∞–Ω–¥–∏
    if context.args:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ–º
            new_count = int(context.args[0])
            if new_count < 0:
                await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                return

            mur_counts[user_first_name] = new_count
            await update.message.reply_text(f"–ú—É—Ä—á–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ, {user_first_name}! –¢–µ–ø–µ—Ä –≤–∏ –º—É—Ä—á–∞–ª–∏ {new_count} —Ä–∞–∑—ñ–≤.")
        except ValueError:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—å.")
    else:
        # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –º—É—Ä—á–∞–Ω—å, —è–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î
        mur_counts[user_first_name] += 1
        count = mur_counts[user_first_name]
        await update.message.reply_text(f"–ú—É—Ä—Ä—Ä, {user_first_name}! –í–∏ –º—É—Ä—á–∞–ª–∏ {count} —Ä–∞–∑—ñ–≤.")
    
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
async def run_telegram_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("murr", mur_handler))
    logger.info("–ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram polling...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
    await asyncio.Event().wait()  # –ë–ª–æ–∫—É—é—á–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è —É—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—é

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è UptimeRobot
async def handle_uptime(request):
    return web.Response(text="UptimeRobot –ø—Ä–∞—Ü—é—î!")

async def run_uptime_robot():
    app = web.Application()
    app.router.add_get("/", handle_uptime)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"UptimeRobot —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    while True:
        await asyncio.sleep(3600)  # –£—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–º

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await asyncio.gather(
        run_telegram_bot(),
        run_uptime_robot()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
