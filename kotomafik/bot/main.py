import os
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –º—É—Ä—á–∞–Ω—å
mur_counts = defaultdict(int)
last_mur_time = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user.first_name} (ID: {user.id})")
    await update.message.reply_text("–í–æ—Ä–∫–∞—é üêæ")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def mur_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    now = datetime.now()

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /murr –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user_first_name} ({user_id})")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –º—É—Ä—á–∞–Ω—å
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            await update.message.reply_text(
                f"–¢–≤–æ–π –º—É—Ä—á–∞–ª—å–Ω—ñ–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è, –∑–∞—á–µ–∫–∞–π {remaining_time.seconds // 60} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    last_mur_time[user_id] = now

    if context.args:
        try:
            new_count = int(context.args[0])
            if new_count < 0:
                await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                return
            mur_counts[user_first_name] = new_count
            await update.message.reply_text(f"{user_first_name} —á—ñ—Ç–µ—Ä! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {new_count}")
        except ValueError:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—åüêæ.")
    else:
        mur_counts[user_first_name] += 1
        count = mur_counts[user_first_name]
        await update.message.reply_text(f"{user_first_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ. –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {count}.")


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def run_bot():
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("murr", mur_handler))

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ–ª—ñ–Ω–≥—É")
        await application.run_polling()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
    finally:
        await application.shutdown()  # –ö–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ü–∏–∫–ª—É
def start_bot():
    while True:
        try:
            asyncio.run(run_bot())
        except RuntimeError as e:
            logger.warning(f"RuntimeError: {e}")
            asyncio.set_event_loop(asyncio.new_event_loop())  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ü–∏–∫–ª –ø–æ–¥—ñ–π
        except Exception as e:
            logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        finally:
            logger.info("–ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            asyncio.sleep(5)


if __name__ == "__main__":
    start_bot()
