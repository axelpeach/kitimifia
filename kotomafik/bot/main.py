import os
import logging
import random
import json
from datetime import datetime, timedelta
from telegram.ext import Application, CommandHandler

# –°—Ç–∞–Ω–∏
SELECTING_RATING = 1

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def update_user_name(update, context):
    user = update.effective_user
    user_id = str(user.id)
    user_name = user.first_name

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ bot_data
    context.bot_data[user_id] = user_name

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "user_data.json"

# –î–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ JSON
def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            user_data = json.load(file)
    else:
        user_data = {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON
def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(user_data, file, indent=6)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
def generate_donation_id():
    return str(random.randint(1000000000, 9999999999))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
async def donate(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    donation_id = generate_donation_id()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Monobank (—Ü–µ –ø—Ä–∏–∫–ª–∞–¥, —Ä–µ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—à–∏–º)
    donation_link = f"https://monobank.ua/pay/{donation_id}"

    # –ó–∞–ø–∏—Å—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "donations": {}}

    user_data[user_id]["donations"][donation_id] = {"status": "pending", "amount": 0}
    save_data()

    await update.message.reply_text(
        f"–î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π ID —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: \n"
        f"–ü–æ–ø–æ–≤–Ω–∏—Ç–∏: {donation_link}\n"
        f"–í–∞—à Donation ID: {donation_id}\n"
        f"–ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ MurrCoins."
    )

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(user_id):
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "mur_count": 0,
            "usik_length": 0.0,
            "balance": 0,  # –î–æ–¥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            "last_mur": None,
            "last_usik": None,
        }

def add_donation(user_id, amount):
    user_id = str(user_id)
    update_user(user_id)
    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ MurrCoins
    murrcoins = amount  # 1 –≥—Ä–Ω = 1 MurrCoin
    user_data[user_id]["murr_balance"] += murrcoins
    # –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—É—Å—ñ–≤ (10 –º–º –∑–∞ 1 –≥—Ä–Ω)
    user_data[user_id]["usik_length"] += amount * 10
    save_data()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {murrcoins} MurrCoins —ñ {amount * 10} –º–º –∑–∞ –¥–æ–Ω–∞—Ç {amount} –≥—Ä–Ω.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–æ–Ω–∞—Ç–µ—Ä–∞
def update_donator_status(user_id):
    if user_id not in user_data:
        user_data[user_id] = {"mur_count": 0, "usik_length": 0.0, "murrcoins": 0, "is_donator": False}

    if user_data[user_id]["murrcoins"] > 0:
        user_data[user_id]["is_donator"] = True
    else:
        user_data[user_id]["is_donator"] = False

    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    update_user(user_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    balance = user_data[user_id].get("balance", 0)

    # –í–∏–≤–æ–¥–∏–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} Murrcoins üêæ")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name} üêæ\n–¢–∏–∫–Ω–∏ –ª–∞–ø–∫–æ—é /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update, context):
    commands = (
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "/murr - –ü–æ–º—É—Ä—á–∞—Ç–∏.\n"
        "/usik - –í–∏—Ä–æ—Å—Ç–∏—Ç–∏ –∫–æ—Ç—è—á—ñ –≤—É—Å–∞.\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å.\n"
        "/spend [—Å—É–º–∞] - –í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ MurrCoins.\n"
        "/donate - .\n"
        "/rating - ."
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –ö–æ–º–∞–Ω–¥–∞ /murr
async def murr(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    update_user(user_id)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ

    last_mur = user_data[user_id].get("last_mur")
    if last_mur:
        elapsed_time = now - datetime.fromisoformat(last_mur)
        if elapsed_time < timedelta(minutes=10):  # –†–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–¢–≤—ñ–π –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    user_data[user_id]["last_mur"] = now.isoformat()
    user_data[user_id]["mur_count"] += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º—É—Ä—á–∞–Ω—å
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ

    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —á–∏—î—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_first_name = target_user.first_name
        target_name = f"{target_first_name} @{target_user.username}" if target_user.username else target_first_name
        await update.message.reply_text(
            f"{user.first_name} –ø–æ–º—É—Ä—á–∞–≤ –Ω–∞ –≤—É—à–∫–æ {target_name} üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )
    else:
        await update.message.reply_text(
            f"{user.first_name} –ø–æ–º—É—Ä—á–∞–≤! üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )

# –ö–æ–º–∞–Ω–¥–∞ /usik
async def usik(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    update_user(user_id)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ

    last_usik = user_data[user_id].get("last_usik")
    if last_usik:
        elapsed_time = now - datetime.fromisoformat(last_usik)
        if elapsed_time < timedelta(hours=1):  # –†–∞–∑ –Ω–∞ 60 —Ö–≤–∏–ª–∏–Ω
            remaining_time = timedelta(hours=1) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"—Ç–≤–æ–π —É—Å—ñ–∫ —É—Å—Ç–∞–ª —Ä–∞—Å—Ç—ñ üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    user_data[user_id]["last_usik"] = now.isoformat()

    # –í–∏—Ä–æ—â—É—î–º–æ –∞–±–æ –∑–º–µ–Ω—à—É—î–º–æ –≤—É—Å–∞
    change = round(random.uniform(-7, 7), 2)
    user_data[user_id]["usik_length"] += change
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ

    await update.message.reply_text(
        f"{user.first_name}, —Ç–≤–æ—ó –≤—É—Å–∞ {'–∑–±—ñ–ª—å—à–∏–ª–∏—Å—å' if change > 0 else '–∑–º–µ–Ω—à–∏–ª–∏—Å—å'} –Ω–∞ {abs(change):.2f} –º–º.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )
    
# –ö–æ–º–∞–Ω–¥–∞ /top_murr
async def top_murr(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –º—É—Ä—á–∞–ª–æ–∫ –ø—É—Å—Ç–∏–π üêæ")
        return

    sorted_murr = sorted(
        [(user_id, data["mur_count"], data.get("is_donator", False)) for user_id, data in user_data.items()],
        key=lambda x: x[1],
        reverse=True
    )[:10]
    leaderboard = "\n".join(
        [
            f"{i+1}. {'üåü' if is_donator else ''} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ‚Äî {mur_count} –º—É—Ä—á–∞–Ω—å"
            for i, (user_id, mur_count, is_donator) in enumerate(sorted_murr)
        ]
    )
    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –º—É—Ä—á—É–Ω—ñ–≤ üêæ:\n{leaderboard}")

# –ö–æ–º–∞–Ω–¥–∞ /top_usik
async def top_usik(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–∂–∏–Ω–∏ –≤—É—Å—ñ–≤ –ø—É—Å—Ç–∏–π üêæ")
        return

    sorted_usik = sorted(
        [(user_id, data["usik_length"], data.get("is_donator", False)) for user_id, data in user_data.items()],
        key=lambda x: x[1],
        reverse=True
    )[:10]
    leaderboard = "\n".join(
        [
            f"{i+1}. {'üåü' if is_donator else ''} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ‚Äî {usik_length:.2f} –º–º"
            for i, (user_id, usik_length, is_donator) in enumerate(sorted_usik)
        ]
    )
    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –≤—É—Å–∞–Ω—ñ–≤ üêæ:\n{leaderboard}")

# –ö–æ–º–∞–Ω–¥–∞ /spend
async def spend(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins, —è–∫—ñ —Ç–∏ —Ö–æ—á–µ—à –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10.")
        return

    amount = int(context.args[0])  # –°—É–º–∞, —è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    update_user(user_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    balance = user_data[user_id].get("balance", 0)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç
    if balance < amount:
        await update.message.reply_text(
            f"–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏. –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins."
        )
        return

    # –ó–Ω—ñ–º–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤
    user_data[user_id]["balance"] -= amount
    user_data[user_id]["usik_length"] += amount * 5  # –î–æ–¥–∞—î–º–æ 5 –º–º –∑–∞ –∫–æ–∂–µ–Ω –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π MurrCoin
    save_data()

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤–∏—Ç—Ä–∞—Ç—É
    await update.message.reply_text(
        f"–¢–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤ {amount} MurrCoins —ñ —Ç–≤–æ—ó –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º! üêæ\n"
        f"–¢–µ–ø–µ—Ä —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–≤–æ—ó—Ö –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    load_data()
    token = os.getenv("TOKEN")
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("usik", usik))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))
    application.add_handler(CommandHandler("top_murr", top_murr))
    application.add_handler(CommandHandler("top_usik", top_usik))
    

    application.run_polling()

if __name__ == "__main__":
    main()
