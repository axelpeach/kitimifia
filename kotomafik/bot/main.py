import os
import random
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.ext import Updater
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
API_TOKEN = os.getenv('API_TOKEN')

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /donate –¥–ª—è –¥–æ–Ω–∞—Ç—ñ–≤
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –¥–æ–Ω–∞—Ç—É
    donation_amount = random.randint(10, 100)  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    # –î–æ–¥–∞—î–º–æ MurrCoins –¥–æ –±–∞–ª–∞–Ω—Å—É
    user_data[user_id]['balance'] += donation_amount
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        f"–î—è–∫—É—î–º–æ –∑–∞ –¥–æ–Ω–∞—Ç! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {donation_amount} MurrCoins! üêæ\n"
        f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins."
    )

# –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª–∞–Ω—Å—É
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–∞–Ω—ñ –≤ user_data
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    balance = user_data[user_id]['balance']
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MurrCoins üêæ")

# –ö–æ–º–∞–Ω–¥–∞ /spend –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
async def spend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10.")
        return

    amount = int(context.args[0])
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    balance = user_data[user_id]['balance']
    
    # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω—à–∏–π –∑–∞ –≤–∏—Ç—Ä–∞—Ç—É
    if balance < amount:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MurrCoins.")
        return
    
    # –í–∏—Ç—Ä–∞—á–∞—î–º–æ MurrCoins —ñ –¥–æ–¥–∞—î–º–æ –≤—É—Å–∞
    user_data[user_id]['balance'] -= amount
    user_data[user_id]['usik_length'] += amount * 5  # 5 –º–º –∑–∞ –∫–æ–∂–µ–Ω –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π MurrCoin
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
    await update.message.reply_text(
        f"–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ {amount} MurrCoins —ñ –≤–∞—à—ñ –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º! üêæ\n"
        f"–¢–µ–ø–µ—Ä –≤–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤–∞—à–∏—Ö –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(API_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if name == "__main__":
    import asyncio
    asyncio.run(main())import os
import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.ext import Updater
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
API_TOKEN = os.getenv('API_TOKEN')

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /donate –¥–ª—è –¥–æ–Ω–∞—Ç—ñ–≤
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –¥–æ–Ω–∞—Ç—É
    donation_amount = random.randint(10, 100)  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    # –î–æ–¥–∞—î–º–æ MurrCoins –¥–æ –±–∞–ª–∞–Ω—Å—É
    user_data[user_id]['balance'] += donation_amount
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        f"–î—è–∫—É—î–º–æ –∑–∞ –¥–æ–Ω–∞—Ç! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {donation_amount} MurrCoins! üêæ\n"
        f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins."
    )

# –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª–∞–Ω—Å—É
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–∞–Ω—ñ –≤ user_data
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    balance = user_data[user_id]['balance']
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MurrCoins üêæ")

# –ö–æ–º–∞–Ω–¥–∞ /spend –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
async def spend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10.")
        return

    amount = int(context.args[0])
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_data:
        user_data[user_id] = {'balance': 0, 'usik_length': 0}
    
    balance = user_data[user_id]['balance']
    
    # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å –º–µ–Ω—à–∏–π –∑–∞ –≤–∏—Ç—Ä–∞—Ç—É
    if balance < amount:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} MurrCoins.")
        return
    
    # –í–∏—Ç—Ä–∞—á–∞—î–º–æ MurrCoins —ñ –¥–æ–¥–∞—î–º–æ –≤—É—Å–∞
    user_data[user_id]['balance'] -= amount
    user_data[user_id]['usik_length'] += amount * 5  # 5 –º–º –∑–∞ –∫–æ–∂–µ–Ω –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π MurrCoin
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
    await update.message.reply_text(
        f"–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ {amount} MurrCoins —ñ –≤–∞—à—ñ –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º! üêæ\n"
        f"–¢–µ–ø–µ—Ä –≤–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤–∞—à–∏—Ö –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if name == "__main__":
    asyncio.run(main())
