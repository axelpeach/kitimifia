import os
import sys
import logging
from datetime import datetime, timedelta
from fastapi import FastAPI, Request, Depends
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import uvicorn
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# PID-—Ñ–∞–π–ª
PID_FILE = "bot.pid"

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram Application
application: Application = None

@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"}

@app.head("/")
async def head_root():
    return {"message": "OK"}

# –í–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
@app.post("/webhook")
async def webhook(request: Request, app: Application = Depends(lambda: application)):
    payload = await request.json()
    logger.info(f"Webhook –æ—Ç—Ä–∏–º–∞–Ω–æ: {payload}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ
    update = Update.de_json(payload, app)
    await app.process_update(update)
    
    return {"status": "ok"}

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –º—É—Ä—á–∞–Ω—å —ñ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
mur_counts = {}
last_mur_time = {}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üêæ\n"
        "–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫. –í–≤–µ–¥—ñ—Ç—å /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    commands = (
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —ñ —ó—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª.\n"
        "/murr - –ü–æ–º—É—Ä—á–∞—Ç–∏ üêæ (—Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω).\n"
        "/set_murr [—á–∏—Å–ª–æ] - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å.\n"
        "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –±–æ—Ç–∞."
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def murr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    now = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–í–∞—à –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    last_mur_time[user_id] = now

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –º—É—Ä—á–∞–Ω—å
    mur_counts[user_id] = mur_counts.get(user_id, 0) + 1
    await update.message.reply_text(f"{user_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /set_murr
async def set_murr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if context.args and context.args[0].isdigit():
        mur_counts[user_id] = int(context.args[0])
        await update.message.reply_text(f"{user_name}, —Ç–µ–ø–µ—Ä –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}.")
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_murr 10")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∞—Ü—é—î! üêæ")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞
async def start_telegram_bot():
    global application  # –û–≥–æ–ª–æ—à—É—î–º–æ –∑–º—ñ–Ω–Ω—É –≥–ª–æ–±–∞–ª—å–Ω–æ
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        return

    application = Application.builder().token(token).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("set_murr", set_murr))
    application.add_handler(CommandHandler("status", status))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ–ª—ñ–Ω–≥—É")
    await application.run_polling()

# –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
def main():
    if os.path.exists(PID_FILE):
        logger.error("–ü—Ä–æ—Ü–µ—Å –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ! –í–∏—Ö—ñ–¥...")
        sys.exit()

    with open(PID_FILE, "w") as f:
        f.write(str(os.getpid()))

    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI —Å–µ—Ä–≤–µ—Ä —ñ Telegram –±–æ—Ç–∞
        loop = asyncio.get_event_loop()
        loop.create_task(start_telegram_bot())
        logger.info("–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞")
        uvicorn.run(app, host="0.0.0.0", port=8080)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    finally:
        if os.path.exists(PID_FILE):
            os.remove(PID_FILE)

if __name__ == "__main__":
    main()
