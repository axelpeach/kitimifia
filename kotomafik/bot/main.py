import os
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from fastapi import FastAPI
from threading import Thread
import uvicorn
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –º—É—Ä—á–∞–Ω—å
mur_counts = defaultdict(int)
last_mur_time = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user.first_name} (ID: {user.id})")
    await update.message.reply_text("–í–æ—Ä–∫–∞—é üêæ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def mur_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    now = datetime.now()

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /murr –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ {user_first_name} ({user_id})")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –º—É—Ä—á–∞–Ω—å
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            await update.message.reply_text(
                f"–¢–≤–æ–π –º—É—Ä—á–∞–ª—å–Ω—ñ–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è, –∑–∞—á–µ–∫–∞–π {remaining_time.seconds // 60} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    last_mur_time[user_id] = now

    if context.args:
        try:
            new_count = int(context.args[0])
            if new_count < 0:
                await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                return
            mur_counts[user_first_name] = new_count
            await update.message.reply_text(f"{user_first_name} —á—ñ—Ç–µ—Ä! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {new_count}")
        except ValueError:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—åüêæ.")
    else:
        mur_counts[user_first_name] += 1
        count = mur_counts[user_first_name]
        await update.message.reply_text(f"{user_first_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ. –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {count}.")

# Telegram –±–æ—Ç
async def run_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("murr", mur_handler))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –ø–æ–ª—ñ–Ω–≥—É")
    await application.run_polling()

# FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

@app.get("/health")
def health_check():
    return {"status": "Bot is running"}

def start_fastapi():
    logger.info("–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞")
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI —Å–µ—Ä–≤–µ—Ä —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    fastapi_thread = Thread(target=start_fastapi, daemon=True)
    fastapi_thread.start()

    # Telegram –±–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    asyncio.run(run_bot())

if __name__ == "__main__":
    main()
