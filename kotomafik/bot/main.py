import os
import logging
import random
import json
import requests
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
from telegram.ext import Application, CommandHandler

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É —Å–ª–æ–≤–Ω–∏–∫—É
user_data = {}

app = Flask(__name__)

# –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
user_data = {}

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç
    if not data or "data" not in data:
        return jsonify({"status": "error", "message": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É"}), 400

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    transaction = data["data"]
    account = transaction.get("account", "–Ω–µ–≤—ñ–¥–æ–º–∏–π")
    amount = transaction.get("amount", 0) / 100  # –°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –≥—Ä–∏–≤–Ω—è—Ö
    user_id = account  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ —è–∫ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "usik_length": 0}
    user_data[user_id]["balance"] += amount

    return jsonify({"status": "success"}), 200

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def update_user_name(update, context):
    user = update.effective_user
    user_id = str(user.id)
    user_name = user.first_name

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ bot_data
    context.bot_data[user_id] = user_name

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "user_data.json"

# –î–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ JSON
def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            user_data = json.load(file)
    else:
        user_data = {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON
def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(user_data, file, indent=6)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
async def donate(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –¥–æ–Ω–∞—Ç–∞
    unique_id = f"{user_id}-{random.randint(1000, 9999)}"

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "usik_length": 0, "donation_id": unique_id}
    else:
        user_data[user_id]["donation_id"] = unique_id



    await update.message.reply_text(
        f"–©–æ–± –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ:\n\n"
        f"[–î–æ–Ω–∞—Ç](<{monobank_link}>)\n\n"
        f"1 –≥—Ä–Ω = 1 MurrCoin üåü. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ MurrCoins –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!",
        parse_mode="Markdown",
    )

# –ó–∞–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –∞–¥—Ä–µ—Å—É –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
WEBHOOK_URL = "https://kitimifia.onrender.com/webhook"

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
MONOBANK_TOKEN = os.getenv("MONOBANK_TOKEN")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ç–æ–∫–µ–Ω
if MONOBANK_TOKEN is None:
    print("–¢–æ–∫–µ–Ω Monobank –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
else:
    print("–¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!")

def register_webhook():
    headers = {
        "X-Token": MONOBANK_TOKEN,
    }
    data = {
        "webHookUrl": WEBHOOK_URL
    }

    response = requests.post("https://api.monobank.ua/personal/webhook", headers=headers, json=data)

    if response.status_code == 200:
        print("Webhook —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!")
    else:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–µ–±—Ö—É–∫–∞: {response.text}")

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(user):
    user_id = str(user.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "mur_count": 0,
            "usik_length": 0.0,
            "balance": 0,
            "is_donator": False,
            "first_name": user.first_name  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        }

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update, context):
    user = update.effective_user
    user_id = str(user.id)

    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "usik_length": 0}

    balance = user_data[user_id]["balance"]

    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} MurrCoins üåü")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name} üêæ\n–¢–∏–∫–Ω–∏ –ª–∞–ø–∫–æ—é /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update, context):
    commands = (
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "/murr - –ü–æ–º—É—Ä—á–∞—Ç–∏.\n"
        "/usik - –í–∏—Ä–æ—Å—Ç–∏—Ç–∏ –∫–æ—Ç—è—á—ñ –≤—É—Å–∞.\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å.\n"
        "/spend [—Å—É–º–∞] - –í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ MurrCoins.\n"
        "/donate - .\n"
        "/rating - ."
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –ö–æ–º–∞–Ω–¥–∞ /murr
async def murr(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    update_user(user_id)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ

    last_mur = user_data[user_id].get("last_mur")
    if last_mur:
        elapsed_time = now - datetime.fromisoformat(last_mur)
        if elapsed_time < timedelta(minutes=10):  # –†–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–¢–≤—ñ–π –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    user_data[user_id]["last_mur"] = now.isoformat()
    user_data[user_id]["mur_count"] += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º—É—Ä—á–∞–Ω—å
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ

    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —á–∏—î—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_first_name = target_user.first_name
        target_name = f"{target_first_name} @{target_user.username}" if target_user.username else target_first_name
        await update.message.reply_text(
            f"{user.first_name} –ø–æ–º—É—Ä—á–∞–≤ –Ω–∞ –≤—É—à–∫–æ {target_name} üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )
    else:
        await update.message.reply_text(
            f"{user.first_name} –ø–æ–º—É—Ä—á–∞–≤! üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )

# –ö–æ–º–∞–Ω–¥–∞ /usik
async def usik(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    update_user(user_id)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ

    last_usik = user_data[user_id].get("last_usik")
    if last_usik:
        elapsed_time = now - datetime.fromisoformat(last_usik)
        if elapsed_time < timedelta(hours=1):  # –†–∞–∑ –Ω–∞ 60 —Ö–≤–∏–ª–∏–Ω
            remaining_time = timedelta(hours=1) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"—Ç–≤–æ–π —É—Å—ñ–∫ —É—Å—Ç–∞–ª —Ä–∞—Å—Ç—ñ üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    user_data[user_id]["last_usik"] = now.isoformat()

    # –í–∏—Ä–æ—â—É—î–º–æ –∞–±–æ –∑–º–µ–Ω—à—É—î–º–æ –≤—É—Å–∞
    change = round(random.uniform(-7, 7), 2)
    user_data[user_id]["usik_length"] += change
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ

    await update.message.reply_text(
        f"{user.first_name}, —Ç–≤–æ—ó –≤—É—Å–∞ {'–∑–±—ñ–ª—å—à–∏–ª–∏—Å—å' if change > 0 else '–∑–º–µ–Ω—à–∏–ª–∏—Å—å'} –Ω–∞ {abs(change):.2f} –º–º.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )
    
# –ö–æ–º–∞–Ω–¥–∞ /top_murr
async def top_murr(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –º—É—Ä—á–∞–Ω—å –ø—É—Å—Ç–∏–π üêæ")
        return

    # –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º—É—Ä—á–∞–Ω—å
    sorted_murr = sorted(
        user_data.items(),
        key=lambda x: x[1]["mur_count"],
        reverse=True
    )[:10]

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥—É
    leaderboard = "\n".join(
        [
            f"{i+1}. {data['first_name']} ‚Äî {data['mur_count']} –º—É—Ä—á–∞–Ω—å"
            for i, (user_id, data) in enumerate(sorted_murr)
        ]
    )

    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –º—É—Ä—á—É–Ω—ñ–≤ üêæ:\n{leaderboard}")


# –ö–æ–º–∞–Ω–¥–∞ /top_usik
async def top_usik(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–∂–∏–Ω–∏ –≤—É—Å—ñ–≤ –ø—É—Å—Ç–∏–π üêæ")
        return

    # –°–æ—Ä—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é –≤—É—Å—ñ–≤
    sorted_usik = sorted(
        user_data.items(),
        key=lambda x: x[1]["usik_length"],
        reverse=True
    )[:10]

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥—É
    leaderboard = "\n".join(
        [
            f"{i+1}. {data['first_name']} ‚Äî {data['usik_length']:.2f} –º–º"
            for i, (user_id, data) in enumerate(sorted_usik)
        ]
    )

    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –≤—É—Å–∞–Ω—ñ–≤ üêæ:\n{leaderboard}")

# –ö–æ–º–∞–Ω–¥–∞ /spend
async def spend(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "usik_length": 0}

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins, —è–∫—ñ —Ç–∏ —Ö–æ—á–µ—à –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10.")
        return

    amount = int(context.args[0])
    balance = user_data[user_id]["balance"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç
    if balance < amount:
        await update.message.reply_text(
            f"–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏. –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins."
        )
        return

    # –ó–Ω—ñ–º–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤
    user_data[user_id]["balance"] -= amount
    user_data[user_id]["usik_length"] += amount * 5

    response = (
        f"–¢–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤ {amount} MurrCoins, —ñ —Ç–≤–æ—ó –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º! üêæ\n"
        f"–¢–µ–ø–µ—Ä —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} MurrCoins.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–≤–æ—ó—Ö –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )

    # –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É –¥–æ–Ω–∞—Ç–æ—Ä–∞
    if "üåü" not in user_data[user_id]:
        user_data[user_id]["donator"] = True
        response += "\n–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –∑–Ω–∞—á–æ–∫ üåü –∑–∞ –≤–Ω–µ—Å–æ–∫ —É —Ä–æ–∑–≤–∏—Ç–æ–∫ –≤—É—Å—ñ–≤!"

    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    load_data()
    token = os.getenv("TOKEN")
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("usik", usik))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))
    application.add_handler(CommandHandler("top_murr", top_murr))
    application.add_handler(CommandHandler("top_usik", top_usik))
    

    application.run_polling()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
    main()
