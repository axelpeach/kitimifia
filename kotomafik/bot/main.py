import os
import logging
import asyncio
import random
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
from telegram.ext import Application, CommandHandler
import nest_asyncio

# –ü–∞—Ç—á –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –º—É—Ä—á–∞–Ω—å —ñ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
mur_counts = {}
last_mur_time = {}

# –î–∞–Ω—ñ –¥–ª—è –≤—É—Å—ñ–≤
usik_lengths = {}
last_usik_time = {}

# –ö–æ–º–∞–Ω–¥–∞ /usik
async def usik(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    now = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    if user_id in last_usik_time:
        elapsed_time = now - last_usik_time[user_id]
        if elapsed_time < timedelta(minutes=20):
            remaining_time = timedelta(minutes=20) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–ù–µ –≤—Å–µ –æ–¥—Ä–∞–∑—É üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è –≤—É—Å—ñ–≤
    last_usik_time[user_id] = now

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏ –≤—É—Å—ñ–≤, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –ø–æ—á–∏–Ω–∞–≤
    if user_id not in usik_lengths:
        usik_lengths[user_id] = 0.0

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–º—ñ–Ω–∏ –¥–æ–≤–∂–∏–Ω–∏ –≤—É—Å—ñ–≤ (-7 –¥–æ +7 –º–º)
    change = round(random.uniform(-7, 7), 2)
    usik_lengths[user_id] = max(0.0, usik_lengths[user_id] + change)  # –í—É—Å–∞ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –º–µ–Ω—à–µ 0

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        f"{user_name}, —Ç–≤–æ—ó –≤—É—Å–∞ {'–∑–±—ñ–ª—å—à–∏–ª–∏—Å—å' if change > 0 else '–∑–º–µ–Ω—à–∏–ª–∏—Å—å'} –Ω–∞ {abs(change):.2f} –º–º.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {usik_lengths[user_id]:.2f} –º–º."
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name} üêæ\n–¢–∏–∫–Ω–∏ –ª–∞–ø–∫–æ—é /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update, context):
    commands = (
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "/murr - –ü–æ–º—É—Ä—á–∞—Ç–∏.\n"
        "/set_murr [—á–∏—Å–ª–æ] - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å.\n"
        "/about - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞.\n"
        "/usik - –í–∏—Ä–æ—Å—Ç–∏—Ç–∏ –∫–æ—Ç—è—á—ñ –≤—É—Å–∞."
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –ö–æ–º–∞–Ω–¥–∞ /murr
async def murr(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    now = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–¢–≤—ñ–π –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ\n–°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    last_mur_time[user_id] = now

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –º—É—Ä—á–∞–Ω—å
    mur_counts[user_id] = mur_counts.get(user_id, 0) + 1
    await update.message.reply_text(f"{user_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ\n–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}.")

# –ö–æ–º–∞–Ω–¥–∞ /set_murr
async def set_murr(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if context.args and context.args[0].isdigit():
        mur_counts[user_id] = int(context.args[0])
        await update.message.reply_text(
            f"{user_name}, —Ç–µ–ø–µ—Ä –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}."
        )
    else:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_murr 10"
        )

# –ö–æ–º–∞–Ω–¥–∞ /about
async def about(update, context):
    await update.message.reply_text("–¶–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ç–∞–º –º—É—Ä—á–∞—Ç–∏ —Ç–∞ —Ä–æ—Å—Ç–∏—Ç–∏ –≤—É—Å–∞ üêæ.")

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram Application
def create_application():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        exit(1)

    application = Application.builder().token(token).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("set_murr", set_murr))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("usik", usik))

    return application

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask("")

@app.route("/")
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = create_application()

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—ñ–Ω–≥")
        asyncio.run(application.run_polling())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.")

if __name__ == "__main__":
    main()
