import os
import logging
import random
import json
import requests
import atexit
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Monobank API
MONOBANK_API_KEY = "–∞–∑–∞–∑–∞"


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "user_data.json"

# –î–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
quotes = [
    "–ë–µ–∑ –≤—É—Å—ñ–≤ —ñ –∫–æ—Ç—É –Ω–µ –∂–∏—Ç–∏.",
    "–ö—ñ—Ç –º–∞–ª–∏–π, –∞ –≤—É—Å–∞ —Ä–æ—Å—Ç—É—Ç—å.",
    "–î–µ –ø–∞—Ö–Ω–µ MurrCoins, —Ç–∞–º –±–∞–≥–∞—Ç–∏–π –∫—ñ—Ç.",
    "–•—Ç–æ —Ä–∞–Ω–æ –º—É—Ä—á–∏—Ç—å, —Ç–æ–π –±—ñ–ª—å—à–µ MurrCoins –º–∞—î.",
    "–ù–µ –≤—ñ–¥–∫–ª–∞–¥–∞–π –º—É—Ä—á–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —è–∫—â–æ –º–æ–∂–µ—à –º—É—Ä–∫–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.",
    "–ù–µ –º—É—Ä–∫–∞–π –±–∞–≥–∞—Ç–æ, –∞ MurrCoins –∑–±–∏—Ä–∞–π.",
    "–î–æ–≤–≥—ñ –≤—É—Å–∞ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è.",
    "–í—É—Å–∞—Ç–∏–π —Ç–æ–π, —Ö—Ç–æ –Ω–µ –∑–∞–±—É–≤–∞—î –ø—Ä–æ —Å–≤—ñ–π –≤—É—Å–∏–∫.",
    "–í—É—Å–∏–∫ –±–µ–∑ MurrCoin ‚Äî —è–∫ –∫—ñ—Ç –±–µ–∑ —Ö–≤–æ—Å—Ç–∞.",
    "–ó–∞ –º—É—Ä—á–∞–Ω–Ω—è–º —ñ –≤—É—Å–∏–∫ –Ω–µ –ø–æ–º—ñ—Ç–Ω–æ, —è–∫ —Ä–æ—Å—Ç–µ.",
    "–ö—ñ—Ç –±–µ–∑ –≤—É—Å–∏–∫–∞ ‚Äî —è–∫ —Å–∫–∞—Ä–±–Ω–∏—Ü—è –±–µ–∑ MurrCoins.",
    "–ú—É—Ä–∫–æ—ó–Ω–∏ –≤–æ–¥—è—Ç—å—Å—è —Ç–∞–º, –¥–µ –∫–æ—Ç–∏ –∑–Ω–∞—é—Ç—å —ó–º —Ü—ñ–Ω—É.",
    "–ì—Ä–æ—à—ñ –Ω–µ –∫—É–ø—É—é—Ç—å —â–∞—Å—Ç—è, –∞–ª–µ –º—É—Ä–∫–æ—ó–Ω–∏ –º–æ–∂—É—Ç—å –∫—É–ø–∏—Ç–∏ –≤—É—Å–∞.",
    "–¢—ñ–ª—å–∫–∏ —Ç–æ–π, —Ö—Ç–æ —Ä–∏–∑–∏–∫–Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –≤—Å—ñ –º—É—Ä–∫–æ—ó–Ω–∏, –∑–º–æ–∂–µ –≤—ñ–¥—Ä–æ—Å—Ç–∏—Ç–∏ –Ω–∞–π–¥–æ–≤—à—ñ –≤—É—Å–∞.",
    "–ß–∞—Å –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ –º—É—Ä–∫–æ—ó–Ω–∏ ‚Äì —á–∞—Å –ø–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –≤—É—Å–∞.",
    "–°–≤—ñ—Ç –Ω–∞–ª–µ–∂–∏—Ç—å —Ç–æ–º—É, —Ö—Ç–æ –º—É—Ä—á–∏—Ç—å –≥–æ–ª–æ—Å–Ω—ñ—à–µ.",
    "–ù–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ–≥–æ, —è–∫—â–æ —É —Ç–µ–±–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º—É—Ä–∫–æ—ó–Ω—ñ–≤.",
    "–Ø–∫—â–æ —Ç–æ–±—ñ —Å–∫–ª–∞–¥–Ω–æ ‚Äì –ø—Ä–æ—Å—Ç–æ –º—É—Ä—á–∏ –¥–∞–ª—ñ.",
    "–ó –≤–µ–ª–∏–∫–∏–º–∏ –≤—É—Å–∞–º–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–µ–ª–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å.",
    "–í–µ–ª–∏–∫—ñ –≤—É—Å–∞ –Ω–µ—Å—É—Ç—å –≤–µ–ª–∏–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å.",
    "–ù–µ –ø–∏—Ç–∞–π, —â–æ –º—É—Ä–∫–æ—ó–Ω–∏ –º–æ–∂—É—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ ‚Äì –ø–∏—Ç–∞–π, —Å–∫—ñ–ª—å–∫–∏ –º–º –≤—É—Å—ñ–≤ —Ç–∏ –º–æ–∂–µ—à –∫—É–ø–∏—Ç–∏ –∑–∞ –Ω–∏—Ö.",
    "–Ø –º—É—Ä—á—É, –æ—Ç–∂–µ, —ñ—Å–Ω—É—é.",
    "–î—É–º–∞–π –º—É—Ä–∫–æ—Ç–ª–∏–≤–æ, –¥—ñ–π –≤—É—Å–∞—Ç–æ.",
    "–ú—É—Ä–∫–æ—ó–Ω–∏ –≤—É—Å–∞ –Ω–µ –≥—Ä—ñ—é—Ç—å, –∞–ª–µ –±–µ–∑ –Ω–∏—Ö –≤–æ–Ω–∏ –Ω–µ —Ä–æ—Å—Ç—É—Ç—å.",
    "–ö–æ—Ç–∏ –∑ –¥–æ–≤–≥–∏–º–∏ –≤—É—Å–∞–º–∏ –º—É—Ä—á–∞—Ç—å –≤–ø–µ–≤–Ω–µ–Ω—ñ—à–µ.",
    "–ù–µ –≤—Å–µ –º—É—Ä–∫–æ—ó–Ω–∏, —â–æ –±–ª–∏—â–∏—Ç—å, –∞–ª–µ –≤—É—Å–∞ –±–µ–∑ –Ω–∏—Ö –Ω–µ –≤–∏—Ä–æ—Å—Ç—É—Ç—å",
    "–ó–∞ –º—É—Ä–∫–æ—ó–Ω–∏ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤—É—Å–∞, –∞–ª–µ –Ω–µ –º—É—Ä—á–∞–Ω–Ω—è.",
    "–ö—ñ—Ç –±–∞–≥–∞—Ç–∏–π –Ω–µ –º—É—Ä—á–∞–Ω–Ω—è–º, –∞ –¥–æ–≤–≥–∏–º–∏ –≤—É—Å–∞–º–∏.",
    "–ù–µ –µ–∫–æ–Ω–æ–º –Ω–∞ –≤—É—Å–∞—Ö ‚Äì –º—É—Ä–∫–æ—ó–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –π —Å—Ç–≤–æ—Ä–µ–Ω—ñ.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫ –Ω–∞—Ä–µ—à—Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –º—É—Ä–∫–æ—ó–Ω–∏ –Ω–∞ —Ä–æ–∑–∫—ñ—à–Ω—ñ –≤—É—Å–∞.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –º—É—Ä—á–∞—Ç–∏ –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—ñ –π –ø–æ—á–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ –≤ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫, —â–æ —Ç–≤–æ—ó –≤—É—Å–∞ –∑–∞—Å–ª—É–≥–æ–≤—É—é—Ç—å –Ω–∞ –±—ñ–ª—å—à–µ.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫ –∑—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –º—É—Ä–∫–æ—ó–Ω–∏ —ñ –∑—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å –≤–µ–ª–∏–∫–µ‚Ä¶ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—É—Å–∞.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ —Ç–∞ –Ω–∞—Ä–µ—à—Ç—ñ –∫—É–ø–∏—Ç–∏ —Å–æ–±—ñ —â–µ 5 –º–º –≤—É—Å—ñ–≤.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫, —â–æ –±–µ–∑ –º—É—Ä–∫–æ—ó–Ω—ñ–≤ –≤—É—Å–∞ –Ω–µ —Ä–æ—Å—Ç—É—Ç—å.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫, —â–æ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å —É—Ä–æ—á–∏—Å—Ç–æ–≥–æ –º—É—Ä–∫–æ—Ç—ñ–Ω–Ω—è.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ —á—É–∂—ñ –≤—É—Å–∞ —ñ –ø–æ—á–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–¥ —Å–≤–æ—ó–º–∏.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∫–æ—Ç—è—á–∏—Ö —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π.",
    "–¶–µ —Ç–≤—ñ–π –∑–Ω–∞–∫, —â–æ –≤—É—Å–∞ —Å–∞–º—ñ —Å–µ–±–µ –Ω–µ –≤—ñ–¥—Ä–æ—Å—Ç—è—Ç—å (–∞–ª–µ –º—É—Ä–∫–æ—ó–Ω–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å).",
    "–ú—É—Ä—á–∞–Ω–Ω—è –ø—Ä–∞–≤–∏—Ç—å —Å–≤—ñ—Ç–æ–º.",
    "–ù–µ –≤—Å—ñ, —Ö—Ç–æ –±–ª—É–∫–∞—î, –∑–∞–≥—É–±–ª–µ–Ω—ñ, –º–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ —à—É–∫–∞—é—Ç—å –º—É—Ä–∫–æ—ó–Ω–∏.",
    "MurrCoin –¥–æ MurrCoin‚Äô–∞ ‚Äî —ñ –±—É–¥—É—Ç—å –Ω–æ–≤—ñ –≤—É—Å–∞."]

HELP_TEXT = """üêæ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞ üêæ

‚ú® –¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ä–æ–∑–≤–∞–≥–∏, —Ç–æ–∂ –º—É—Ä—á–∏, —Ä–æ—Å—Ç–∏ –≤—É—Å–∞ —Ç–∞ –∑–±–∏—Ä–∞–π MurrCoins —Ä–∞–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ç–∏–∫–∞–º–∏!
üßπ –ß–∞—Å –≤—ñ–¥ —á–∞—Å—É –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ—á–∏—â–∞—î—Ç—å—Å—è –≤—ñ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—è–∫—â–æ —Ç–∏ –Ω–µ –∑–∞—Ö–æ–¥–∏–≤ –±—ñ–ª—å—à–µ 7 –¥–Ω—ñ–≤).
üí∞ MurrCoins –º–æ–∂–Ω–∞ –∑–∞—Ä–æ–±–∏—Ç–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –Ω–∞ –≤—É—Å–∞ ‚Äì –∞–ª–µ –ø–∞–º‚Äô—è—Ç–∞–π, —â–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –±–∞–≥–∞—Ç—ñ–π —Ç–æ–π, —É –∫–æ–≥–æ –¥–æ–≤–≥—ñ –≤—É—Å–∞!
–ù–∞ —Ü—å–æ–º—É –≤—Å–µ, –ø—É—Ö–Ω–∞—Å—Ç—ñ –¥—Ä—É–∑—ñ, –º—É—Ä-–º—É—Ä! üò∫

üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

üîπ –û—Å–Ω–æ–≤–Ω–µ
/start ‚Äì –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º.
/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

üîπ –ú—É—Ä–∫–æ—Ç—ñ–Ω–Ω—è —Ç–∞ –≤—É—Å–∞
/murr ‚Äì –ø–æ–º—É—Ä—á–∞—Ç–∏ (—Ä–∞–∑ –Ω–∞ 10 —Ö–≤, –º–æ–∂–Ω–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–Ω—à–æ–º—É –∫–æ—Ç–∏–∫—É).
/top_murr ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –º—É—Ä—á–∞–ª—å–Ω–∏–∫—ñ–≤.
/usik ‚Äì –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è –≤—É—Å—ñ–≤ (—Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É).
/top_usik ‚Äì —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–π–¥–æ–≤—à–∏—Ö –≤—É—Å—ñ–≤.

üîπ MurrCoins
/balance ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.
/spend ‚Äì –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ MurrCoins –Ω–∞ –≤—É—Å–∞.
/get ‚Äì –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ MurrCoins (—Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å).
/donate ‚Äì –∫—É–ø–∏—Ç–∏ MurrCoins (–∫—É—Ä—Å 1:1, –ø—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –∫–∞–≤–æ—é).

üîπ –Ü–Ω—à–µ
/c ‚Äì –º—É–¥—Ä–∞ —Ü–∏—Ç–∞—Ç–∞ –≤—ñ–¥ –ú—É–¥—Ä–æ–≥–æ –ö–æ—Ç–∞.

üì© –ó–≤‚Äô—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º: @ghtipiq

–ú—É—Ä-–º—É—Ä, –Ω–µ—Ö–∞–π —Ç–≤–æ—ó –≤—É—Å–∞ —Ä–æ—Å—Ç—É—Ç—å, –∞ –º—É—Ä–∫–æ—ó–Ω–∏ –º–Ω–æ–∂–∞—Ç—å—Å—è! üò∫‚ú®"""

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ JSON
def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as file:
                user_data = json.load(file)
        except (json.JSONDecodeError, IOError):
            user_data = {}  # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫
    else:
        user_data = {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON
def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(user_data, file, indent=4)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(user):
    user_id = str(user.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "first_name": user.first_name,
            "balance": 0,
            "mur_count": 0,
            "usik_length": 0.0,
            "last_mur": None,
            "last_usik": None,
            "last_get": None,
            "last_active": datetime.now().isoformat(),  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        }
    else:
        user_data[user_id]["first_name"] = user.first_name
        user_data[user_id]["last_active"] = datetime.now().isoformat()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª—ñ


def remove_inactive_users():
    global user_data
    now = datetime.now()

    # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏
    to_remove = []

    for user_id, data in user_data.items():
        last_active = data.get("last_active")
        
        # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –ø–æ–ª–µ "last_active"
        if last_active:
            last_active = datetime.fromisoformat(last_active)
            if now - last_active > timedelta(days=7):  # –Ø–∫—â–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –±—ñ–ª—å—à–µ 7 –¥–Ω—ñ–≤
                to_remove.append(user_id)

    # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user_id in to_remove:
        del user_data[user_id]
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    save_data()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name} üêæ\n–¢–∏–∫–Ω–∏ –ª–∞–ø–∫–æ—é /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update, context):
    await update.message.reply_text(HELP_TEXT)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ü–∏—Ç–∞—Ç–∏
async def random_quote(update: Update, context):
    quote = random.choice(quotes)
    await update.message.reply_text(f'"{quote}"\n‚Äî –ú—É–¥—Ä–∏–π –ö—ñ—Ç')

# –ö–æ–º–∞–Ω–¥–∞ /murr
async def murr(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ JSON
    update_user(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –º—É—Ä—á–∞—Ç–∏ (—Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω)
    last_mur = user_data[user_id].get("last_mur")
    if last_mur:
        elapsed_time = now - datetime.fromisoformat(last_mur)
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–¢–≤—ñ–π –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ\n–°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    user_data[user_id]["last_mur"] = now.isoformat()
    user_data[user_id]["mur_count"] += 1  # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º—É—Ä—á–∞–Ω—å
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

    # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —á–∏—î—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_first_name = target_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        await update.message.reply_text(
            f"{user_data[user_id]['first_name']} –ø–æ–º—É—Ä—á–∞–≤ –Ω–∞ –≤—É—à–∫–æ {target_first_name} üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )
    else:
        await update.message.reply_text(
            f"{user_data[user_id]['first_name']} –ø–æ–º—É—Ä—á–∞–≤! üêæ\n"
            f"–í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {user_data[user_id]['mur_count']}."
        )

# –ö–æ–º–∞–Ω–¥–∞ /usik
async def usik(update, context):
    user = update.effective_user
    user_id = str(user.id)
    now = datetime.now()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ JSON
    update_user(user)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –≤–∏—Ä–æ—â—É–≤–∞—Ç–∏ –≤—É—Å–∞ (—Ä–∞–∑ –Ω–∞ 60 —Ö–≤–∏–ª–∏–Ω)
    last_usik = user_data[user_id].get("last_usik")
    if last_usik:
        elapsed_time = now - datetime.fromisoformat(last_usik)
        if elapsed_time < timedelta(hours=1):
            remaining_time = timedelta(hours=1) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"–¢–≤—ñ–π –≤—É—Å–∏–∫ –≤—Ç–æ–º–∏–≤—Å—è —Ä–æ—Å—Ç–∏ üòø\n—Å–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ—Å—Ç—É –≤—É—Å—ñ–≤
    user_data[user_id]["last_usik"] = now.isoformat()

    # –ó–º—ñ–Ω—é—î–º–æ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤ (–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—é –∑–º—ñ–Ω–æ—é)
    change = round(random.uniform(-7, 7), 2)  # –î–æ–≤–∂–∏–Ω–∞ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –≤—ñ–¥ -7 –¥–æ 7 –º–º
    user_data[user_id]["usik_length"] += change
    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(
        f"{user_data[user_id]['first_name']}, —Ç–≤—ñ–π –≤—É—Å–∏–∫ {'–∑–±—ñ–ª—å—à–∏–≤—Å—è' if change > 0 else '–∑–º–µ–Ω—à–∏–≤—Å—è'} –Ω–∞ {abs(change):.2f} –º–º.\n" 
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']:.2f} –º–º."
    )
    
# –ö–æ–º–∞–Ω–¥–∞ /top_murr
async def top_murr(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –º—É—Ä—á–∞–ª–æ–∫ –ø—É—Å—Ç–∏–π üê±")
        return

    sorted_murr = sorted(
        [(data["first_name"], data["mur_count"]) for data in user_data.values()],
        key=lambda x: x[1],
        reverse=True
    )[:10]
    leaderboard = "\n".join(
        [f"{i+1}. {first_name} ‚Äî {mur_count} –º—É—Ä—á–∞–Ω—å" for i, (first_name, mur_count) in enumerate(sorted_murr)]
    )
    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –º—É—Ä—á–∞–ª–æ–∫ üê±:\n{leaderboard}")

# –ö–æ–º–∞–Ω–¥–∞ /top_usik
async def top_usik(update, context):
    if not user_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–∂–∏–Ω–∏ –≤—É—Å–∞–Ω—ñ–≤ –ø—É—Å—Ç–∏–π üê±")
        return

    sorted_usik = sorted(
        [(data["first_name"], data["usik_length"]) for data in user_data.values()],
        key=lambda x: x[1],
        reverse=True
    )[:10]
    leaderboard = "\n".join(
        [f"{i+1}. {first_name} ‚Äî {usik_length:.2f} –º–º" for i, (first_name, usik_length) in enumerate(sorted_usik)]
    )
    await update.message.reply_text(f"üèÜ –¢–æ–ø-10 –≤—É—Å–∞–Ω—ñ–≤ üê±:\n{leaderboard}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—É—Ä–∫–æ—ó–Ω—ñ–≤
async def get(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    update_user(user)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = user_data.get(user_id, {})
    current_time = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –∫–æ–ª–∏ –≤–æ—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–æ–Ω—É–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /get
    last_get = user_info.get("last_get")
    if last_get:
        last_get_time = datetime.fromisoformat(last_get)
        if current_time - last_get_time < timedelta(hours=24):
            remaining_time = timedelta(hours=24) - (current_time - last_get_time)
            hours, minutes = divmod(remaining_time.seconds, 3600)
            minutes //= 60
            await update.message.reply_text(
                f"–Ñ –≤ –≥–ª–µ—á–∏–∫—É MurrCoin —Ç–∞ –≥–æ–ª–æ–≤–∞ –Ω–µ –≤–ª–∞–∑–∏—Ç—å...\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {hours} –≥–æ–¥–∏–Ω {minutes} —Ö–≤–∏–ª–∏–Ω."
            )
            return

    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä–∫–æ—ó–Ω—ñ–≤ (–≤—ñ–¥ 1 –¥–æ 10)
    random_coins = random.randint(1, 2)
    user_data[user_id]["balance"] += random_coins

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /get
    user_info["last_get"] = current_time.isoformat()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    user_data[user_id] = user_info
    save_data()

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        f"–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ {random_coins} –º—É—Ä–∫–æ—ó–Ω—ñ–≤! \n–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä: {user_info['balance']} –º—É—Ä–∫–æ—ó–Ω—ñ–≤."
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏ –º—É—Ä–∫–æ—ó–Ω—ñ–≤
async def spend(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = str(user.id)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    update_user(user)

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –≤–∫–∞–∑–∞–≤ —á–∏—Å–ª–æ, –±–æ—Ç —á–µ–∫–∞—î –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if not context.args:
        await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –º—É—Ä–∫–æ—ó–Ω—ñ–≤ —Ç–∏ —Ö–æ—á–µ—à –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏? –í—ñ–¥–ø—Ä–∞–≤ —á–∏—Å–ª–æ.")
        context.user_data["awaiting_spend"] = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        return
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–¥—Ä–∞–∑—É –≤–≤—ñ–≤ —á–∏—Å–ª–æ
    await process_spend(update, context, context.args[0])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –º—É—Ä–∫–æ—ó–Ω—ñ–≤
async def process_spend(update: Update, context: CallbackContext, spend_amount):
    user = update.effective_user
    user_id = str(user.id)

    # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —î —á–∏—Å–ª–æ–º
    if not spend_amount.isdigit():
        await update.message.reply_text("–¢–∏ –º–∞–≤ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ—é /spend.")
        context.user_data.pop("awaiting_spend", None)  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        return
    
    spend_amount = int(spend_amount)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
    balance = user_data[user_id].get("balance", 0)

    if spend_amount > balance:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ üòø\n–ü–µ—Ä–µ–≤—ñ—Ä –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ—é /balance")
        return

    # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –º—É—Ä–∫–æ—ó–Ω–∏ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—É—Å–∞
    user_data[user_id]["balance"] -= spend_amount
    usik_increase = spend_amount * 5
    user_data[user_id]["usik_length"] += usik_increase

    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

    await update.message.reply_text(
        f"–¢–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤ {spend_amount} MurrCoins. –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ {user_data[user_id]['balance']} MurrCoins.\n"
        f"–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ {usik_increase} –º–º –≤—É—Å—ñ–≤. –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {user_data[user_id]['usik_length']} –º–º."
    )

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    context.user_data.pop("awaiting_spend", None)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É –ø—ñ—Å–ª—è /spend (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)
async def handle_text(update: Update, context: CallbackContext):
    if context.user_data.pop("awaiting_spend", None):  # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–ª–∞–≥ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await process_spend(update, context, update.message.text)

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    update_user(user)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
    balance = user_data[user_id].get("balance", 0)

    # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç–∏–π
    if balance == 0:
        await update.message.reply_text(
            "–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç–∏–π... üòø\n"
            "–ê–ª–µ –Ω–µ —Å—É–º—É–π! –ù–∞–ø–∏—à–∏ /get —ñ –∑–∞—Ä–æ–±–∏ —Å–≤–æ—ó –ø–µ—Ä—à—ñ MurrCoins! üêæ\n"
            "–ê–±–æ –∫—É–ø–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É –∫–∞–≤—É –≤–∏–∫–æ—Å—Ç–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /donate" 
        )
    else:
        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        await update.message.reply_text(
            f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins üêæ\n"
            "–ü–∞–º'—è—Ç–∞–π, —â–æ MurrCoins –º–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ /spend!"
        )

# –ö–æ–º–∞–Ω–¥–∞ /donate
async def donate(update, context):
    user = update.effective_user
    user_id = str(user.id)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    await update.message.reply_text(
        f"–ó—Ä–æ–±—ñ—Ç—å –¥–æ–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç–∫—É Monobank 4441111026523120. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø–µ—Ä–µ–∫–∞–∑—É:\n\n"
        f"ID –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {user_id}\n–ö—É—Ä—Å 1 –¥–æ 1"
    )


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
def check_transactions():
    headers = {"X-Token": MONOBANK_API_KEY}
    url = "https://api.monobank.ua/personal/statement/0/{}".format(
        int((datetime.now() - timedelta(minutes=5)).timestamp())
    )
    
    try:
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            transactions = response.json()

            for transaction in transactions:
                # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —î –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø–ª–∞—Ç–µ–∂—É
                if "comment" in transaction:
                    user_id = transaction["comment"].strip()

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä —î —á–∏—Å–ª–æ–º (ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
                    if user_id.isdigit():
                        amount = transaction["amount"] / 100  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ–π–∫–∏ —É –≥—Ä–∏–≤–Ω—ñ
                        add_murkoins(user_id, amount)
                        logger.info(f"–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {amount} –º—É—Ä–∫–æ—ó–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

            return transactions
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {response.status_code}")
            return None

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Monobank: {e}")
        return None

# –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –º—É—Ä–∫–æ—ó–Ω—ñ–≤
def add_murkoins(user_id: str, amount: float):
    if user_id in user_data:
        user_data[user_id]["balance"] += amount
    else:
        user_data[user_id] = {"balance": amount, "mur_count": 0}
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {amount} –º—É—Ä–∫–æ—ó–Ω—ñ–≤. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}")
    save_data()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    load_data()
    token = "—Ç–æ–∫–µ–Ω"
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("usik", usik))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("top_murr", top_murr))
    application.add_handler(CommandHandler("top_usik", top_usik))
    application.add_handler(CommandHandler("spend", spend))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CommandHandler("get", get))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("c", random_quote))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: check_transactions(), 'interval', minutes=5)
    scheduler.add_job(remove_inactive_users, 'interval', days=1)  
    scheduler.start()
    
    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –±–æ—Ç–∞
    atexit.register(lambda: scheduler.shutdown(wait=False))
    
    application.run_polling() #–º—ñ—à–∞ –Ω–µ —Ä—É–≥–∞–π –Ω–µ –ø–ª–∞—á 


if __name__ == "__main__":
    main()
