import os
import sqlite3
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ Render
TOKEN = os.getenv("TOKEN")
MONOBANK_API = os.getenv("MONOBANK_API")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def create_db():
    conn = sqlite3.connect("user_data.db")
    cursor = conn.cursor()
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id TEXT PRIMARY KEY,
        balance INTEGER DEFAULT 0,
        usik_length REAL DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def add_user(user_id, balance, usik_length):
    conn = sqlite3.connect("user_data.db")
    cursor = conn.cursor()

    cursor.execute("""
    INSERT OR REPLACE INTO users (user_id, balance, usik_length)
    VALUES (?, ?, ?)
    """, (user_id, balance, usik_length))

    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_data(user_id):
    conn = sqlite3.connect("user_data.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    conn.close()
    return data

# –ö–æ–º–∞–Ω–¥–∞ /donate
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –±–∞–Ω–∫—É
    donate_link = "https://send.monobank.ua/jar/5yxJsnYG82"
    await update.message.reply_text(f"–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–Ω–∞—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {donate_link}. –£ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤–∫–∞–∂–∏ —Å–≤—ñ–π ID: {user_id}.")

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
    data = get_user_data(user_id)

    if data:
        balance = data[1]
        usik_length = data[2]
        await update.message.reply_text(f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins.\n–î–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {usik_length:.2f} –º–º.")
    else:
        await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –∑—Ä–æ–±–∏–≤ –¥–æ–Ω–∞—Ç—ñ–≤, –±—É–¥—å –ª–∞—Å–∫–∞, –∑—Ä–æ–±–∏ —Ü–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /donate.")

# –ö–æ–º–∞–Ω–¥–∞ /spend
async def spend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é MurrCoins –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins, —è–∫—ñ —Ç–∏ —Ö–æ—á–µ—à –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10.")
        return

    amount = int(context.args[0])

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏
    data = get_user_data(user_id)

    if not data:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –º—É—Ä–∫–æ—ó–Ω—ñ–≤. –°–ø–µ—Ä—à—É –∑—Ä–æ–±–∏ –¥–æ–Ω–∞—Ç.")
        return

    balance = data[1]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç
    if balance < amount:
        await update.message.reply_text(f"–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins –¥–ª—è —Ü—ñ—î—ó –≤–∏—Ç—Ä–∞—Ç–∏. –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins.")
        return

    # –ó–Ω—ñ–º–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤
    usik_length = data[2]
    new_usik_length = usik_length + (amount * 5)  # –î–æ–¥–∞—î–º–æ 5 –º–º –∑–∞ –∫–æ–∂–µ–Ω –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π MurrCoin
    new_balance = balance - amount

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
    add_user(user_id, new_balance, new_usik_length)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤–∏—Ç—Ä–∞—Ç—É
    await update.message.reply_text(
        f"–¢–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤ {amount} MurrCoins —ñ —Ç–≤–æ—ó –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º! üêæ\n"
        f"–¢–µ–ø–µ—Ä —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å: {new_balance} MurrCoins.\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–≤–æ—ó—Ö –≤—É—Å—ñ–≤: {new_usik_length:.2f} –º–º."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    create_db()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    main()
