import os
import logging
from telegram.ext import Application, CommandHandler
from datetime import datetime, timedelta
import nest_asyncio

# –ü–∞—Ç—á –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É (—É—Å—É–≤–∞—î –ø—Ä–æ–±–ª–µ–º—É "RuntimeError: Cannot close a running event loop")
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –º—É—Ä—á–∞–Ω—å —ñ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
mur_counts = {}
last_mur_time = {}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"–ø—Ä–∏–≤—ñ—Ç, {user.first_name} üêæ\n"
        "–Ω–∞—Ç–∏—Å–Ω–∏ /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /help
async def help_command(update, context):
    commands = (
        "/start - –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —Å—Ç–∞—Ä—Ç \n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ \n"
        "/murr - –º—É—Ä—á–∞–Ω–Ω—è —Ä–∞–∑ –Ω–∞ 10—Ö–≤ \n"
        "/set_murr [—á–∏—Å–ª–æ] - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å.\n"
        "/about - –ø—Ä–æ –±–æ—Ç–∞ \n"
        "/usik - coming soon"
    )
    await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n{commands}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def murr(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    now = datetime.now()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            minutes, seconds = divmod(remaining_time.seconds, 60)
            await update.message.reply_text(
                f"ndsq –º—É—Ä—á–∞–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è üêæ! \n —Å–ø—Ä–æ–±—É–π —â–µ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {seconds} —Å–µ–∫—É–Ω–¥."
            )
            return

    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—É—Ä—á–∞–Ω–Ω—è
    last_mur_time[user_id] = now

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –º—É—Ä—á–∞–Ω—å
    mur_counts[user_id] = mur_counts.get(user_id, 0) + 1
    await update.message.reply_text(f"{user_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ!\n –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /set_murr
async def set_murr(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if context.args and context.args[0].isdigit():
        mur_counts[user_id] = int(context.args[0])
        await update.message.reply_text(f"{user_name} —á—ñ—Ç–µ—Ä. \n –≤—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {mur_counts[user_id]}.")
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /set_murr 10")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /status
async def status(update, context):
    await update.message.reply_text("–Ω–∞–∫–∏–¥–∞–π—Ç–µ —ñ–¥–µ–π —â–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å—é–¥–∏ –≤ —Ä–æ–∑–¥—ñ–ª –ø—Ä–æ –±–æ—Ç–∞")

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram Application
def create_application():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        exit(1)
    
    application = Application.builder().token(token).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("murr", murr))
    application.add_handler(CommandHandler("set_murr", set_murr))
    application.add_handler(CommandHandler("about", status))

    return application

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    application = create_application()
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—ñ–Ω–≥")
        await application.run_polling()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
