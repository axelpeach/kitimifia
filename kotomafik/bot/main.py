import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram.ext import Application, CommandHandler
from collections import defaultdict
from aiohttp import web

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

mur_counts = defaultdict(int)
last_mur_time = {}

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ –¥–æ–º–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
DOMAIN = os.getenv("DOMAIN")  # –í–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, example.com)
PORT = int(os.getenv("PORT", 10000))  # –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞

if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN")
if not DOMAIN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ DOMAIN")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update, context):
    await update.message.reply_text("–≤–æ—Ä–∫–∞—é ü•∫")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /murr
async def mur_handler(update, context):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    now = datetime.now()

    if user_id in last_mur_time:
        elapsed_time = now - last_mur_time[user_id]
        if elapsed_time < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - elapsed_time
            await update.message.reply_text(
                f"—Ç–≤–æ–π –º—É—Ä—á–∞–ª—å–Ω—ñ–∫ –ø–µ—Ä–µ–≥—Ä—ñ–≤—Å—è, –∑–∞—á–µ–∫–∞–π {remaining_time.seconds // 60} —Ö–≤–∏–ª–∏–Ω —Ç–∞ {remaining_time.seconds % 60} —Å–µ–∫—É–Ω–¥."
            )
            return

    last_mur_time[user_id] = now

    if context.args:
        try:
            new_count = int(context.args[0])
            if new_count < 0:
                await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É—Ä—á–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é.")
                return
            mur_counts[user_first_name] = new_count
            await update.message.reply_text(f"{user_first_name} —á—ñ—Ç–µ—Ä! –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {new_count}")
        except ValueError:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—É—Ä—á–∞–Ω—åüêæ.")
    else:
        mur_counts[user_first_name] += 1
        count = mur_counts[user_first_name]
        await update.message.reply_text(f"{user_first_name} –ø–æ–º—É—Ä—á–∞–≤ üêæ. –í—Å—å–æ–≥–æ –º—É—Ä—á–∞–Ω—å: {count}.")


# –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è UptimeRobot
async def handle_uptime(request):
    return web.Response(text="UptimeRobot –ø—Ä–∞—Ü—é—î!")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞
async def run_telegram_bot():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("murr", mur_handler))

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    webhook_url = f"https://{DOMAIN}/webhook"
    await application.bot.set_webhook(webhook_url)
    logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

    # Aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫—ñ–≤
    app = web.Application()
    app.router.add_post('/webhook', application.webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"UptimeRobot —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ UptimeRobot
async def run_uptime_robot():
    app = web.Application()
    app.router.add_get("/", handle_uptime)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT + 1)  # –°–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot –Ω–∞ —ñ–Ω—à–æ–º—É –ø–æ—Ä—Ç—É
    await site.start()
    logger.info(f"UptimeRobot —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT + 1}")

    # –£—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–º
    while True:
        await asyncio.sleep(3600)


# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    await asyncio.gather(
        run_telegram_bot(),
        run_uptime_robot()
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
