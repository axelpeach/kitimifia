import os
import sqlite3
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
    JobQueue,
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
MONOBANK_API = os.getenv("MONOBANK_API")
JAR_LINK = "https://send.monobank.ua/jar/5yxJsnYG82"

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
DB_NAME = "bot_data.db"
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = conn.cursor()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        usik_length REAL DEFAULT 0
    )
    """
)
conn.commit()


# –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def add_user(user_id: int, username: str):
    cursor.execute(
        "INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)",
        (user_id, username),
    )
    conn.commit()


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user(user_id: int):
    cursor.execute(
        "SELECT username, balance, usik_length FROM users WHERE id = ?", (user_id,)
    )
    return cursor.fetchone()


# –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
def update_balance(user_id: int, amount: int):
    cursor.execute(
        "UPDATE users SET balance = balance + ? WHERE id = ?", (amount, user_id)
    )
    conn.commit()


# –û–Ω–æ–≤–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É –≤—É—Å—ñ–≤
def update_usik_length(user_id: int, length: float):
    cursor.execute(
        "UPDATE users SET usik_length = usik_length + ? WHERE id = ?", (length, user_id)
    )
    conn.commit()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username or "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ç–∏–∫")
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤ –≥–æ–≤–Ω–æ üêæ")


# –ö–æ–º–∞–Ω–¥–∞ /donate
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username or "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ç–∏–∫")
    code = str(user.id)
    await update.message.reply_text(
        f"–©–æ–± –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏, –ø–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º {JAR_LINK} —ñ –¥–æ–¥–∞–π —Ü–µ–π –∫–æ–¥ —É –∫–æ–º–µ–Ω—Ç–∞—Ä: {code}"
    )


# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = get_user(user.id)
    if data:
        username, balance, usik_length = data
        await update.message.reply_text(
            f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {balance} MurrCoins ü™ô\n"
            f"–î–æ–≤–∂–∏–Ω–∞ –≤—É—Å—ñ–≤: {usik_length:.2f} –º–º üêæ"
        )
    else:
        await update.message.reply_text("–¢–µ–±–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ!")


# –ö–æ–º–∞–Ω–¥–∞ /spend
async def spend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MurrCoins. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /spend 10")
        return

    amount = int(context.args[0])
    data = get_user(user.id)
    if data:
        username, balance, usik_length = data
        if balance >= amount:
            update_balance(user.id, -amount)
            update_usik_length(user.id, amount * 5)
            await update.message.reply_text(
                f"–¢–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤ {amount} MurrCoins! –¢–≤–æ—ó –≤—É—Å–∞ –≤–∏—Ä–æ—Å–ª–∏ –Ω–∞ {amount * 5} –º–º üêæ"
            )
        else:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MurrCoins!")
    else:
        await update.message.reply_text("–¢–µ–±–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ!")


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–Ω–∞—Ç—ñ–≤
async def check_donations(context: CallbackContext):
    headers = {"X-Token": MONOBANK_API}
    response = requests.get("https://api.monobank.ua/personal/statement/0", headers=headers)
    if response.status_code == 200:
        transactions = response.json()
        for transaction in transactions:
            if "comment" in transaction and transaction["comment"].isdigit():
                user_id = int(transaction["comment"])
                amount = transaction["amount"] // 100
                update_balance(user_id, amount)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TOKEN).build()

# –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("donate", donate))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("spend", spend))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è JobQueue
    job_queue = application.job_queue
    job_queue.run_repeating(check_donations, interval=60, first=10)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
